import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
import sqlite3
from config import BOT_TOKEN, ADMIN_ID, CHAT_IDS, DATABASE_URL  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
game_state = {
    "active_game": None,  # "bingo" –∏–ª–∏ "roulette"
    "players": [],  # –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π: {"user_id": user_id, "username": username, "numbers": numbers}
    "bingo_numbers": [],  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –ë–∏–Ω–≥–æ
    "registration_open": False,
    "pinned_message_id": None,
    "vip_users": [],  # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: {"user_id": user_id, "username": username}
    "bonus_users": {}  # {user_id: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–æ–ø_–∑–∞–ø–∏—Å–µ–π}
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ
def is_valid_chat(chat_id):
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞: chat_id={chat_id}, CHAT_IDS={CHAT_IDS}")
    return chat_id in CHAT_IDS

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def get_db_connection():
    return sqlite3.connect(DATABASE_URL)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_data():
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            CREATE TABLE IF NOT EXISTS vip_users (
                user_id INTEGER PRIMARY KEY,
                username TEXT
            )
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS bonus_users (
                user_id INTEGER PRIMARY KEY,
                bonus_count INTEGER
            )
        """)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("SELECT user_id, username FROM vip_users")
        game_state["vip_users"] = []
        rows = cur.fetchall()
        for row in rows:
            game_state["vip_users"].append({"user_id": row[0], "username": row[1]})
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("SELECT user_id, bonus_count FROM bonus_users")
        game_state["bonus_users"] = {}
        rows = cur.fetchall()
        for row in rows:
            game_state["bonus_users"][row[0]] = row[1]
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        cur.close()
        conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
def save_data():
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("DELETE FROM vip_users")
        for vip in game_state["vip_users"]:
            cur.execute("INSERT OR REPLACE INTO vip_users (user_id, username) VALUES (?, ?)",
                        (vip["user_id"], vip["username"]))
        cur.execute("DELETE FROM bonus_users")
        for user_id, count in game_state["bonus_users"].items():
            cur.execute("INSERT OR REPLACE INTO bonus_users (user_id, bonus_count) VALUES (?, ?)",
                       (user_id, count))
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        cur.close()
        conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(user_id):
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: user_id={user_id}, ADMIN_ID={ADMIN_ID}")
    return user_id in ADMIN_ID

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ
def is_valid_chat(chat_id):  # –£–±–µ—Ä–∏ —ç—Ç—É –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è —Ñ—É–Ω–∫—Ü–∏—é, –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞: chat_id={chat_id}, CHAT_IDS={CHAT_IDS}")
    return chat_id in CHAT_IDS

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VIP
def is_vip(user_id):
    for vip in game_state["vip_users"]:
        if vip["user_id"] == user_id:
            return True
    return False

# –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def count_entries(user_id):
    count = 0
    for entry in game_state["players"]:
        if entry["user_id"] == user_id:
            count += 1
    return count

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
def game_selection_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üé≤ –ë–∏–Ω–≥–æ", callback_data="bingo"))
    keyboard.add(InlineKeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∞", callback_data="roulette"))
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
def register_button():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="register"))
    return keyboard

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def update_pinned_message(chat_id):
    message_text = "üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    if game_state["players"]:
        for idx, entry in enumerate(game_state["players"], 1):
            if game_state["active_game"] == "bingo":
                numbers = " ".join(map(str, entry["numbers"]))
                message_text += f"{idx}. {entry['username']} {numbers}\n"
            else:
                message_text += f"{idx}. {entry['username']}\n"

    keyboard = register_button() if game_state["active_game"] == "roulette" and game_state["registration_open"] else None

    if game_state["pinned_message_id"]:
        try:
            bot.edit_message_text(message_text, chat_id, game_state["pinned_message_id"], reply_markup=keyboard)
        except:
            pass
    else:
        msg = bot.send_message(chat_id, message_text, reply_markup=keyboard)
        try:
            bot.pin_chat_message(chat_id, msg.message_id)
            game_state["pinned_message_id"] = msg.message_id
        except:
            pass

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_data()

# –ö–æ–º–∞–Ω–¥–∞ /game
@bot.message_handler(commands=['game'])
def start_game(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /game –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—É!")
        return
    if not is_valid_chat(chat_id):
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
        return
    if game_state["active_game"]:
        bot.reply_to(message, "‚ö† –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å /stop –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset.")
        return
    bot.reply_to(message, "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=game_selection_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_game_selection(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    print(f"Callback –æ—Ç user_id={user_id}, chat_id={chat_id}: {call.data}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
    if call.data == "register":
        if not is_valid_chat(chat_id):
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
            return
        if game_state["active_game"] != "roulette" or not game_state["registration_open"]:
            bot.answer_callback_query(call.id, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä—É–ª–µ—Ç–∫—É –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞!")
            return
        
        username = f"@{call.from_user.username or call.from_user.first_name}"
        current_entries = count_entries(user_id)
        max_entries = 2 if is_vip(user_id) else (1 + game_state["bonus_users"].get(user_id, 0))
        if current_entries >= max_entries:
            bot.answer_callback_query(call.id, f"‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ ({max_entries})!")
            return
        
        game_state["players"].append({"user_id": user_id, "username": username})
        update_pinned_message(chat_id)
        bot.answer_callback_query(call.id, "‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã!")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –∏–≥—Ä—É!")
        return

    game_state["active_game"] = call.data
    game_state["registration_open"] = True
    game_state["players"] = []
    game_state["bingo_numbers"] = []
    game_state["pinned_message_id"] = None

    if call.data == "bingo":
        bot.send_message(chat_id, 
                        "üé≤ –ó–∞–ø–∏—Å—å –Ω–∞ –ë–∏–Ω–≥–æ –æ—Ç–∫—Ä—ã—Ç–∞!\nüìù –î–ª—è —É—á–∞—Å—Ç–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @ –∏ 5 —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100 (–∏–ª–∏ 4 –¥–ª—è VIP/–±–æ–Ω—É—Å)\n–ü—Ä–∏–º–µ—Ä: @ 1 2 3 4 5\n\nüìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:")
        update_pinned_message(chat_id)
    elif call.data == "roulette":
        bot.send_message(chat_id, 
                        "üé∞ –ó–∞–ø–∏—Å—å –Ω–∞ –†—É–ª–µ—Ç–∫—É –æ—Ç–∫—Ä—ã—Ç–∞!\nüìù –î–ª—è —É—á–∞—Å—Ç–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @\n\nüìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:")
        update_pinned_message(chat_id)

    bot.answer_callback_query(call.id)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤
@bot.message_handler(regexp=r'^@')
def register_player(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = f"@{message.from_user.username or message.from_user.first_name}"
    print(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞: {username}, user_id={user_id}, chat_id={chat_id}")
    if not game_state["registration_open"]:
        return
    if not is_valid_chat(chat_id):
        return

    current_entries = count_entries(user_id)
    max_entries = 2 if is_vip(user_id) else (1 + game_state["bonus_users"].get(user_id, 0))

    if current_entries >= max_entries:
        bot.reply_to(message, f"‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ ({max_entries})!")
        return

    if game_state["active_game"] == "bingo":
        parts = message.text.strip().split()
        if parts[0] == "@":
            # –§–æ—Ä–º–∞—Ç: @ 1 2 3 4 5
            required_numbers = 4 if (is_vip(user_id) or user_id in game_state["bonus_users"]) else 5
            if len(parts) != required_numbers + 1:
                bot.reply_to(message, f"‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è {required_numbers} —á–∏—Å–µ–ª! –ü—Ä–∏–º–µ—Ä: @ 1 2 3 4{' 5' if required_numbers == 5 else ''}")
                return
            username_to_save = username  # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        else:
            # –§–æ—Ä–º–∞—Ç: @username 1 2 3 4 5
            required_numbers = 4 if (is_vip(user_id) or user_id in game_state["bonus_users"]) else 5
            if len(parts) != required_numbers + 2:  # +2, —Ç.–∫. –µ—Å—Ç—å @username –∏ —á–∏—Å–ª–∞
                bot.reply_to(message, f"‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è {required_numbers} —á–∏—Å–µ–ª –ø–æ—Å–ª–µ @username! –ü—Ä–∏–º–µ—Ä: @username 1 2 3 4{' 5' if required_numbers == 5 else ''}")
                return
            username_to_save = parts[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π @username
            parts = parts[1:]  # –£–±–∏—Ä–∞–µ–º @username –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∏—Å–µ–ª

        try:
            numbers = [int(x) for x in parts]
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            if len(set(numbers)) != len(numbers):
                bot.reply_to(message, "‚ùå –¶–∏—Ñ—Ä—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è! –í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.")
                return
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª
            for x in numbers:
                if x < 1 or x > 100:
                    bot.reply_to(message, "‚ùå –ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!")
                    return
        except ValueError:
            bot.reply_to(message, "‚ùå –í—Å–µ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏!")
            return

        game_state["players"].append({"user_id": user_id, "username": username_to_save, "numbers": numbers})
        update_pinned_message(chat_id)

    elif game_state["active_game"] == "roulette":
        if message.text.strip() != "@":
            return
        
        game_state["players"].append({"user_id": user_id, "username": username})
        update_pinned_message(chat_id)

# –ö–æ–º–∞–Ω–¥–∞ /spisok
@bot.message_handler(commands=['spisok'])
def stop_registration(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /spisok –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å —Å–±–æ—Ä!")
        return
    if not is_valid_chat(chat_id):
        return
    if not game_state["registration_open"]:
        bot.reply_to(message, "‚ö† –°–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞—á–∞—Ç!")
        return
    game_state["registration_open"] = False
    bot.send_message(chat_id, f"‚èπ –°–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω!\nüéÆ –ò–≥—Ä–∞ {game_state['active_game'].title()} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—Å–µ–º —É–¥–∞—á–∏! üçÄ")
    update_pinned_message(chat_id)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"

# –ö–æ–º–∞–Ω–¥—ã /num –∏ /num2
@bot.message_handler(commands=['num', 'num2'])
def generate_bingo_numbers(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ {message.text} –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–∞!")
        return
    if not is_valid_chat(chat_id):
        return
    if game_state["active_game"] != "bingo" or game_state["registration_open"]:
        bot.reply_to(message, "‚ö† –ò–≥—Ä–∞ –ë–∏–Ω–≥–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ —Å–±–æ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω!")
        return
    count = 1 if message.text == "/num" else 2
    new_rows = []
    for _ in range(count):
        row = random.sample(range(1, 101), 5)
        new_rows.append(row)
    for row in new_rows:
        game_state["bingo_numbers"].append(row)
    message_text = ""
    for row in game_state["bingo_numbers"]:
        message_text += " | ".join(map(str, row)) + "\n‚ûñ\n"
    bot.send_message(chat_id, message_text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞ "–ë–∏–Ω–≥–æ"
@bot.message_handler(func=lambda message: message.text.lower().strip() in ["bingo", "–±–∏–Ω–≥–æ"])
def check_bingo(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = f"@{message.from_user.username or message.from_user.first_name}"
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–∏–Ω–≥–æ –æ—Ç {username}, user_id={user_id}, chat_id={chat_id}")
    if game_state["active_game"] != "bingo" or game_state["registration_open"]:
        return
    if not is_valid_chat(chat_id):
        return

    user_entries = []
    for entry in game_state["players"]:
        if entry["user_id"] == user_id:
            user_entries.append(entry)
    if not user_entries:
        bot.reply_to(message, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!")
        return

    bingo_numbers = set()
    for row in game_state["bingo_numbers"]:
        for num in row:
            bingo_numbers.add(num)
    for entry in user_entries:
        player_numbers = set()
        for num in entry["numbers"]:
            player_numbers.add(num)
        if player_numbers.issubset(bingo_numbers):
            bot.send_message(chat_id, 
                            f"‚úÖ {username} –∑–∞—è–≤–∏–ª –ë–∏–Ω–≥–æ! –ß–∏—Å–ª–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç! –ê–¥–º–∏–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è. üéâ")
            return

    bot.send_message(chat_id, 
                    f"‚ùå {username}, –Ω–µ –æ–±–º–∞–Ω—ã–≤–∞–π—Ç–µ! –ù–µ –≤—Å–µ –≤–∞—à–∏ —á–∏—Å–ª–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ. –ê–¥–º–∏–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É! üò°")

# –ö–æ–º–∞–Ω–¥–∞ /random
@bot.message_handler(commands=['random'])
def random_roulette(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /random –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–Ω–¥–æ–º!")
        return
    if not is_valid_chat(chat_id):
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
        return
    if game_state["active_game"] != "roulette" or game_state["registration_open"]:
        bot.reply_to(message, "‚ö† –ò–≥—Ä–∞ –†—É–ª–µ—Ç–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ —Å–±–æ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω!")
        return
    try:
        count = int(message.text.split()[1])
        if count != len(game_state["players"]):
            bot.reply_to(message, f"‚ùå –£–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤! –í —Å–ø–∏—Å–∫–µ: {len(game_state['players'])}")
            return
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä /random 30")
        return
    random_index = random.randint(1, count)
    bot.send_message(chat_id, f"üé∞ –†–∞–Ω–¥–æ–º: {random_index}\n‚è≥ –ñ–¥—ë–º 1 –º–∏–Ω—É—Ç—É...")

# –ö–æ–º–∞–Ω–¥–∞ /stop
@bot.message_handler(commands=['stop'])
def stop_game(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /stop –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É!")
        return
    if not is_valid_chat(chat_id):
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
        return
    if not game_state["active_game"]:
        bot.reply_to(message, "‚ö† –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        return
    bot.send_message(chat_id, f"üèÅ –ò–≥—Ä–∞ {game_state['active_game'].title()} –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–º —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üéâ")
    game_state["active_game"] = None
    game_state["registration_open"] = False
    game_state["players"] = []
    game_state["bingo_numbers"] = []
    game_state["pinned_message_id"] = None
    game_state["bonus_users"] = {}

# –ö–æ–º–∞–Ω–¥–∞ /reset
@bot.message_handler(commands=['reset'])
def reset_game(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /reset –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É!")
        return
    if not is_valid_chat(chat_id):
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
        return
    bot.send_message(chat_id, "üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å–±—Ä–æ—à–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É —Å /game.")
    game_state["active_game"] = None
    game_state["registration_open"] = False
    game_state["players"] = []
    game_state["bingo_numbers"] = []
    game_state["pinned_message_id"] = None

# –ö–æ–º–∞–Ω–¥–∞ /getid
@bot.message_handler(commands=['getid'])
def get_id(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = f"@{message.from_user.username or message.from_user.first_name}"
    print(f"–ö–æ–º–∞–Ω–¥–∞ /getid –æ—Ç user_id={user_id}, chat_id={chat_id}")
    bot.reply_to(message, f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                          f"- –í–∞—à ID: {user_id}\n"
                          f"- ID —á–∞—Ç–∞: {chat_id}\n"
                          f"- –í–∞—à–µ –∏–º—è: {username}")

# –ö–æ–º–∞–Ω–¥–∞ /vip
@bot.message_handler(commands=['vip'])
def set_vip(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /vip –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å VIP!")
        return
    if not is_valid_chat(chat_id):
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
        return
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å VIP!")
        return

    target_user_id = message.reply_to_message.from_user.id
    target_username = f"@{message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name}"
    for vip in game_state["vip_users"]:
        if vip["user_id"] == target_user_id:
            bot.reply_to(message, f"‚ùå {target_username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è VIP!")
            return

    game_state["vip_users"].append({"user_id": target_user_id, "username": target_username})
    save_data()
    bot.reply_to(message, f"üëë {target_username} –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å VIP!")

# –ö–æ–º–∞–Ω–¥–∞ /delvip
@bot.message_handler(commands=['delvip'])
def remove_vip(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /delvip –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å VIP!")
        return
    if not is_valid_chat(chat_id):
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
        return
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ VIP!")
        return

    target_user_id = message.reply_to_message.from_user.id
    target_username = f"@{message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name}"
    found = False
    for vip in game_state["vip_users"]:
        if vip["user_id"] == target_user_id:
            found = True
            break
    if not found:
        bot.reply_to(message, f"‚ùå {target_username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è VIP!")
        return

    new_vip_users = []
    for vip in game_state["vip_users"]:
        if vip["user_id"] != target_user_id:
            new_vip_users.append(vip)
    game_state["vip_users"] = new_vip_users
    save_data()
    bot.reply_to(message, f"‚úÖ {target_username} –±–æ–ª—å—à–µ –Ω–µ VIP.")

# –ö–æ–º–∞–Ω–¥–∞ /bonus
@bot.message_handler(commands=['bonus'])
def set_bonus(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /bonus –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –±–æ–Ω—É—Å—ã!")
        return
    if not is_valid_chat(chat_id):
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
        return
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –±–æ–Ω—É—Å!")
        return

    target_user_id = message.reply_to_message.from_user.id
    target_username = f"@{message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name}"
    if is_vip(target_user_id):
        bot.reply_to(message, f"‚ùå {target_username} —è–≤–ª—è–µ—Ç—Å—è VIP –∏ —É–∂–µ –∏–º–µ–µ—Ç —ç—Ç–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!")
        return
    if target_user_id in game_state["bonus_users"]:
        bot.reply_to(message, f"‚ùå {target_username} —É–∂–µ –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!")
        return

    game_state["bonus_users"][target_user_id] = 1
    save_data()
    bot.reply_to(message, f"üéÅ {target_username} –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å –Ω–∞ —ç—Ç—É –∏–≥—Ä—É! –ú–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –±–∏–Ω–≥–æ —Å 4 —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –Ω–∞ —Ä—É–ª–µ—Ç–∫—É 2 —Ä–∞–∑–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /top
@bot.message_handler(commands=['top'])
def show_top(message):
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /top –æ—Ç user_id={message.from_user.id}, chat_id={chat_id}")
    if not is_valid_chat(chat_id):
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
        return

    if not game_state["vip_users"]:
        bot.send_message(chat_id, "üëë –¢–æ–ø VIP-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π!")
        return

    message_text = "üëë –¢–æ–ø VIP-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    for idx, vip in enumerate(game_state["vip_users"], 1):
        message_text += f"{idx}. {vip['username']}\n"
    bot.send_message(chat_id, message_text)

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def help_command(message):
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç user_id={message.from_user.id}, chat_id={chat_id}")
    help_text = (
        "üìñ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:\n\n"
        "üéÆ /game ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É (–ë–∏–Ω–≥–æ –∏–ª–∏ –†—É–ª–µ—Ç–∫–∞).\n"
        "üìã /spisok ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.\n"
        "üî¢ /num ‚Äî –í—ã–¥–∞—Ç—å 1 —Ä—è–¥ –∏–∑ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª (–¥–ª—è –ë–∏–Ω–≥–æ).\n"
        "üî¢ /num2 ‚Äî –í—ã–¥–∞—Ç—å 2 —Ä—è–¥–∞ –∏–∑ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª (–¥–ª—è –ë–∏–Ω–≥–æ).\n"
        "üîó /bingo ‚Äî –°–æ–æ–±—â–∏—Ç—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ (–¥–ª—è –ë–∏–Ω–≥–æ).\n"
        "üé∞ /random <—á–∏—Å–ª–æ> ‚Äî –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä (–¥–ª—è –†—É–ª–µ—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä /random 30).\n"
        "üèÅ /stop ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É (–ë–∏–Ω–≥–æ –∏–ª–∏ –†—É–ª–µ—Ç–∫–∞). –ë–æ–Ω—É—Å—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è.\n"
        "üîÑ /reset ‚Äî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.\n"
        "üìã /getid ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID –∏ ID —á–∞—Ç–∞.\n"
        "üëë /vip ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ VIP (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n"
        "üëë /delvip ‚Äî –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ VIP (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n"
        "üéÅ /bonus ‚Äî –î–∞—Ç—å –±–æ–Ω—É—Å —É—á–∞—Å—Ç–Ω–∏–∫—É (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n"
        "üèÜ /top ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ VIP-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
        "üìñ /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "‚ùó –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:\n"
        "- –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ë–∏–Ω–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @ –∏ 5 —á–∏—Å–µ–ª (–∏–ª–∏ 4 –¥–ª—è VIP/–±–æ–Ω—É—Å–∞) (–Ω–∞–ø—Ä–∏–º–µ—Ä, @ 1 2 3 4 5).\n"
        "- –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –†—É–ª–µ—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "- –ö–æ–º–∞–Ω–¥—ã /game, /spisok, /num, /num2, /random, /stop, /reset, /vip, /delvip, /bonus –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É."
    )
    bot.send_message(chat_id, help_text)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
import atexit
atexit.register(save_data)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
        save_data()
