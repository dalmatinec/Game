import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
import psycopg2
from config import BOT_TOKEN, ADMIN_ID, CHAT_ID, DATABASE_URL

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (–≤ –ø–∞–º—è—Ç–∏, –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –±–∞–∑–æ–π)
game_state = {
    "active_game": None,
    "players": [],
    "bingo_numbers": [],
    "registration_open": False,
    "pinned_message_id": None,
    "vip_users": [],
    "bonus_users": {}
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_data():
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("CREATE TABLE IF NOT EXISTS vip_users (user_id BIGINT PRIMARY KEY, username TEXT)")
        cur.execute("CREATE TABLE IF NOT EXISTS bonus_users (user_id BIGINT PRIMARY KEY, bonus_count INTEGER)")
        cur.execute("SELECT user_id, username FROM vip_users")
        game_state["vip_users"] = [{"user_id": row[0], "username": row[1]} for row in cur.fetchall()]
        cur.execute("SELECT user_id, bonus_count FROM bonus_users")
        game_state["bonus_users"] = {row[0]: row[1] for row in cur.fetchall()]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        cur.close()
        conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
def save_data():
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("DELETE FROM vip_users")
        for vip in game_state["vip_users"]:
            cur.execute("INSERT INTO vip_users (user_id, username) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username",
                       (vip["user_id"], vip["username"]))
        cur.execute("DELETE FROM bonus_users")
        for user_id, count in game_state["bonus_users"].items():
            cur.execute("INSERT INTO bonus_users (user_id, bonus_count) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET bonus_count = EXCLUDED.bonus_count",
                       (user_id, count))
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        cur.close()
        conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(user_id):
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: user_id={user_id}, ADMIN_ID={ADMIN_ID}")
    return user_id in ADMIN_ID

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ
def is_valid_chat(chat_id):
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞: chat_id={chat_id}, CHAT_ID={CHAT_ID}")
    return chat_id == CHAT_ID

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
def game_selection_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üé≤ –ë–∏–Ω–≥–æ", callback_data="bingo"))
    keyboard.add(InlineKeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∞", callback_data="roulette"))
    return keyboard

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def update_pinned_message(chat_id):
    if game_state["players"]:
        message_text = "üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n\n"
        for idx, entry in enumerate(game_state["players"], 1):
            if game_state["active_game"] == "bingo":
                numbers = " ".join(map(str, entry["numbers"]))
                message_text += f"{idx}. {entry['username']} {numbers}\n"
            else:
                message_text += f"{idx}. {entry['username']}\n"
    else:
        message_text = "üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n\n"

    if game_state["pinned_message_id"]:
        try:
            bot.edit_message_text(message_text, chat_id, game_state["pinned_message_id"])
        except:
            pass
    else:
        msg = bot.send_message(chat_id, message_text)
        try:
            bot.pin_chat_message(chat_id, msg.message_id)
            game_state["pinned_message_id"] = msg.message_id
        except:
            pass

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_data()

# –ö–æ–º–∞–Ω–¥–∞ /newchat
@bot.message_handler(commands=['newchat'])
def change_chat(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /newchat –æ—Ç user_id={user_id}, chat_id={chat_id}")

    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ ADMIN_ID –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —á–∞—Ç!")
        return

    try:
        new_chat_id = int(message.text.split()[1])
        print(f"–ù–æ–≤—ã–π CHAT_ID: {new_chat_id}")
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /newchat -1001234567890")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ–≤—ã–π —á–∞—Ç —Å —Ç–µ–∫—É—â–∏–º
    if new_chat_id == CHAT_ID:
        bot.reply_to(message, "‚ö† –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ! –£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π ID –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{new_chat_id}"))
    keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    bot.reply_to(message, f"üì¢ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç —Å ID {new_chat_id}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: True)
def handle_confirmation(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    print(f"Callback –æ—Ç user_id={user_id}, chat_id={chat_id}: {call.data}")

    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å!")
        return

    if call.data.startswith("confirm_"):
        new_chat_id = int(call.data.split("_")[1])
        global CHAT_ID
        old_chat_id = CHAT_ID
        CHAT_ID = new_chat_id

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–æ—Å–æ–º
        save_data()

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ
        transfer_message = (
            f"üöö –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –∏–∑ —á–∞—Ç–∞ {old_chat_id} –≤ —á–∞—Ç {new_chat_id}!\n"
            f"üëë –¢–æ–ø VIP-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {', '.join(v['username'] for v in game_state['vip_users']) if game_state['vip_users'] else '–ø—É—Å—Ç–æ'}\n"
            f"‚Ñπ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ."
        )
        bot.send_message(old_chat_id, transfer_message)
        bot.send_message(new_chat_id, transfer_message)

        # –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ VIP –∏–∑ –±–∞–∑—ã
        game_state["active_game"] = None
        game_state["registration_open"] = False
        game_state["players"] = []
        game_state["bingo_numbers"] = []
        game_state["pinned_message_id"] = None
        game_state["bonus_users"] = {}

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
        load_data()

        bot.answer_callback_query(call.id, "‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω!")
    elif call.data == "cancel":
        bot.answer_callback_query(call.id, "‚ùå –ü–µ—Ä–µ–Ω–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        bot.answer_callback_query(call.id, "‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /game
@bot.message_handler(commands=['game'])
def start_game(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /game –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—É!")
        return
    if not is_valid_chat(chat_id):
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
        return
    if game_state["active_game"]:
        bot.reply_to(message, "‚ö† –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å /stop –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset.")
        return
    bot.reply_to(message, "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=game_selection_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ /vip
@bot.message_handler(commands=['vip'])
def set_vip(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /vip –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å VIP!")
        return
    if not is_valid_chat(chat_id):
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
        return
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å VIP!")
        return

    target_user_id = message.reply_to_message.from_user.id
    target_username = f"@{message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name}"
    if any(vip["user_id"] == target_user_id for vip in game_state["vip_users"]):
        bot.reply_to(message, f"‚ùå {target_username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è VIP!")
        return

    game_state["vip_users"].append({"user_id": target_user_id, "username": target_username})
    save_data()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
    bot.reply_to(message, f"üëë {target_username} –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å VIP!")

# –ö–æ–º–∞–Ω–¥–∞ /delvip
@bot.message_handler(commands=['delvip'])
def remove_vip(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /delvip –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å VIP!")
        return
    if not is_valid_chat(chat_id):
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
        return
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ VIP!")
        return

    target_user_id = message.reply_to_message.from_user.id
    target_username = f"@{message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name}"
    if not any(vip["user_id"] == target_user_id for vip in game_state["vip_users"]):
        bot.reply_to(message, f"‚ùå {target_username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è VIP!")
        return

    game_state["vip_users"] = [vip for vip in game_state["vip_users"] if vip["user_id"] != target_user_id]
    save_data()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
    bot.reply_to(message, f"‚úÖ {target_username} –±–æ–ª—å—à–µ –Ω–µ VIP.")

# –ö–æ–º–∞–Ω–¥–∞ /bonus
@bot.message_handler(commands=['bonus'])
def set_bonus(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /bonus –æ—Ç user_id={user_id}, chat_id={chat_id}")
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –±–æ–Ω—É—Å—ã!")
        return
    if not is_valid_chat(chat_id):
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ!")
        return
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –±–æ–Ω—É—Å!")
        return

    target_user_id = message.reply_to_message.from_user.id
    target_username = f"@{message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name}"
    if is_vip(target_user_id):
        bot.reply_to(message, f"‚ùå {target_username} —è–≤–ª—è–µ—Ç—Å—è VIP –∏ —É–∂–µ –∏–º–µ–µ—Ç —ç—Ç–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!")
        return
    if target_user_id in game_state["bonus_users"]:
        bot.reply_to(message, f"‚ùå {target_username} —É–∂–µ –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!")
        return

    game_state["bonus_users"][target_user_id] = 1  # –î–∞—ë–º 1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
    save_data()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
    bot.reply_to(message, f"üéÅ {target_username} –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å –Ω–∞ —ç—Ç—É –∏–≥—Ä—É! –ú–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –±–∏–Ω–≥–æ —Å 4 —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –Ω–∞ —Ä—É–ª–µ—Ç–∫—É 2 —Ä–∞–∑–∞.")

# ... (–¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–¥–∞)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
import atexit
atexit.register(save_data)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
        save_data()
